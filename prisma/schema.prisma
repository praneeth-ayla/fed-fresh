generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * --------------------------------------------------------------------------
 */
/**
 * üîê NEXTAUTH CORE MODELS
 */
/**
 * --------------------------------------------------------------------------
 */

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

/**
 * --------------------------------------------------------------------------
 */
/**
 * üõçÔ∏è  APP CORE MODELS
 */
/**
 * --------------------------------------------------------------------------
 */

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slug        String   @unique

  products Product[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  basePrice     Decimal
  images        Image[]
  allergenNotes String?
  maxFreeAddons Int      @default(0)
  maxPaidAddons Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  categoryId Int
  category   Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  addons     ProductAddon[]
  orderItems OrderItem[]
}

model Image {
  id       Int    @id @default(autoincrement())
  url      String
  metadata String

  Product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Addon {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Decimal   @default(0)
  type        AddonType
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products        ProductAddon[]
  orderItemAddons OrderItemAddon[]
}

model ProductAddon {
  id        Int      @id @default(autoincrement())
  productId Int
  addonId   Int
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  addon   Addon   @relation(fields: [addonId], references: [id], onDelete: Cascade)

  @@unique([productId, addonId])
}

/**
 * --------------------------------------------------------------------------
 */
/**
 * üßæ ORDERS & DELIVERIES
 */
/**
 * --------------------------------------------------------------------------
 */

model Order {
  id                    Int           @id @default(autoincrement())
  orderNumber           String        @unique
  customerEmail         String
  customerPhone         String?
  deliveryAddress       Json
  orderType             OrderType
  subtotal              Decimal
  discountAmount        Decimal       @default(0)
  totalAmount           Decimal
  paymentStatus         PaymentStatus @default(PENDING)
  stripePaymentIntentId String?
  orderStatus           OrderStatus   @default(ACTIVE)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  discount   Discount?   @relation(fields: [discountId], references: [id])
  discountId Int?
  items      OrderItem[]
  deliveries Delivery[]

  @@index([orderNumber])
  @@index([customerEmail])
  @@index([createdAt])
}

model OrderItem {
  id              Int      @id @default(autoincrement())
  quantity        Int      @default(1)
  unitPrice       Decimal
  totalPrice      Decimal
  productSnapshot Json
  createdAt       DateTime @default(now())

  orderId   Int
  productId Int
  order     Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product          @relation(fields: [productId], references: [id])
  addons    OrderItemAddon[]
}

model OrderItemAddon {
  id            Int      @id @default(autoincrement())
  addonSnapshot Json
  createdAt     DateTime @default(now())

  orderItemId Int
  addonId     Int
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  addon       Addon     @relation(fields: [addonId], references: [id])
}

model Delivery {
  id            Int            @id @default(autoincrement())
  deliveryDate  DateTime
  status        DeliveryStatus @default(SCHEDULED)
  deliveredAt   DateTime?
  trackingNotes String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([deliveryDate])
  @@index([status])
  @@index([orderId])
}

/**
 * --------------------------------------------------------------------------
 */
/**
 * üìÖ DATE & AVAILABILITY MANAGEMENT
 */
/**
 * --------------------------------------------------------------------------
 */

model AvailableDeliveryDate {
  id           Int      @id @default(autoincrement())
  deliveryDate DateTime @unique
  available    Boolean  @default(true)
  capacity     Int?
  ordersBooked Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([deliveryDate])
  @@index([available])
}

model Holiday {
  id          Int      @id @default(autoincrement())
  holidayDate DateTime
  description String
  year        Int?
  createdAt   DateTime @default(now())

  @@unique([holidayDate])
}

model DeliveryZone {
  id              Int      @id @default(autoincrement())
  postcodePattern String
  zoneName        String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Discount {
  id             Int          @id @default(autoincrement())
  code           String       @unique
  type           DiscountType
  value          Decimal
  minOrderAmount Decimal      @default(0)
  usageLimit     Int?
  usedCount      Int          @default(0)
  validFrom      DateTime?
  validUntil     DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  orders Order[]
}

/**
 * --------------------------------------------------------------------------
 */
/**
 * ENUMS
 */
/**
 * --------------------------------------------------------------------------
 */

enum OrderType {
  ONE_TIME
  WEEKLY_PLAN
  CUSTOM_DATES
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  ACTIVE
  PARTIALLY_COMPLETE
  COMPLETED
  CANCELLED
}

enum DeliveryStatus {
  SCHEDULED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum AddonType {
  FREE
  PAID
}

enum DiscountType {
  PERCENTAGE
  FIXED
}
